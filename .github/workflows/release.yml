name: Publish VSC Web Server
on:
  workflow_dispatch:
    inputs:
      uploadGHReleases:
        description: 'Upload GitHub Releases'
        required: true
        default: "false"

jobs:
  build:
    strategy:
      matrix:
        # os: [ubuntu-18.04, macos-11, windows-latest]
        # support only ubuntu for now
        os: [ubuntu-18.04]
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.os }}      
    steps:
      - name: Check out the vscode repository
        run: git clone https://github.com/gitpod-io/vscode --depth=1 --branch web-server
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Set cache key (Linux & macOS)
        if: runner.os != 'Windows'
        working-directory: vscode/
        run: |
          echo "CACHE_KEY=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Set environment variables (Windows)
        if: runner.os == 'Windows'
        working-directory: vscode/
        run: |
          chcp 65001
          echo ("CACHE_KEY=$(git rev-parse --short HEAD)") >> $env:GITHUB_ENV
      - uses: actions/cache@v2
        id: cache
        with:
          path: |
            server-pkg/
            server-pkg-server/
            server-pkg-web/
          key: ${{ runner.os }}-${{ env.CACHE_KEY }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./vscode
        run: yarn --frozen-lockfile --network-timeout 180000
      - name: Prepare for distribution
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./vscode
        run: yarn gulp server-min
      - name: Move build output
        run: cp -r server-pkg/ bundle/
      - name: Determine archive filename
        uses: haya14busa/action-cond@v1
        id: archive
        with:
          cond: ${{ runner.os == 'Windows' }}
          if_true: 'zip'
          if_false: 'tar.gz'
      - name: Set environment variables (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          echo "EXTENSION=${{ steps.archive.outputs.value }}" >> $GITHUB_ENV
          echo "VERSION=$(node -p -e "require('./vscode/package.json').version")" >> $GITHUB_ENV
          echo "VSC_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Set environment variables (Windows)
        if: runner.os == 'Windows'
        run: |
          chcp 65001
          echo ("ARCHIVE_NAME=code-web-server-v" + $(node -p -e "require('./vscode/package.json').version")+"-"+ $("${{ runner.os }}".tolower())+"-x64") >> $env:GITHUB_ENV
          echo ("ARCHIVE_FULL_NAME=code-web-server-v" + $(node -p -e "require('./vscode/package.json').version")+"-"+ $("${{ runner.os }}".tolower())+"-x64.${{ steps.archive.outputs.value }}") >> $env:GITHUB_ENV
      - name: Set archive file name
        run: |
          echo "ARCHIVE_NAME=code-web-server-v${{ env.VERSION }}-$(echo ${{ runner.os }} | tr  '[:upper:]' '[:lower:]')-x64" >> $GITHUB_ENV
          echo "ARCHIVE_FULL_NAME=code-web-server-v${{ env.VERSION }}-$(echo ${{ runner.os }} | tr  '[:upper:]' '[:lower:]')-x64.${{ env.EXTENSION }}" >> $GITHUB_ENV
      - name: Rename the bundle file
        run: mv bundle/ ${{ env.ARCHIVE_NAME }}/
      - name: Bundle tarfile
        if: runner.os  != 'Windows'
        run: |
          sudo tar cfzv ${{ env.ARCHIVE_FULL_NAME }} ${{ env.ARCHIVE_NAME }}/ > /dev/null
      - name: Bundle zip
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path ${{ env.ARCHIVE_NAME }}\* -CompressionLevel Optimal -DestinationPath ${{ env.ARCHIVE_FULL_NAME }}
      - name: Archive sanity check
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-x64
          path: ${{ env.ARCHIVE_FULL_NAME }}
  upload:
    needs: build 
    runs-on: ubuntu-latest
    name: Create the release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: outputs/
      - run: ls -R
      - run: echo "TAG=$(ls outputs/Linux-x64 | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_ENV
      - run: echo "VSC Web Server v${{ env.VERSION }} ([${{ env.VSC_COMMIT }}](https://github.com/gitpod-io/vscode/commit/${{ env.VSC_COMMIT }}))" >> "/tmp/release_body.md"
      - name: Create release
        if: github.event.inputs.uploadGHReleases == 'true'
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'outputs/**/*.tar.gz,outputs/**/*.zip'
          bodyFile: '/tmp/release_body.md'
          tag: v${{ env.TAG }}
          # repo: vscode
          token: ${{ secrets.GITHUB_TOKEN }} # Todo: add a token with more permissions
  docker:
    needs: upload
    runs-on: ubuntu-latest
    name: Build and publish Docker image
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Download Linux artifact
        uses: actions/download-artifact@v2
        with:
          path: outputs/
          name: Linux-x64
      - name: Set server version
        run: echo "VERSION=$(ls outputs/ | sed -nre 's/^[^0-9]*(([0-9]+\.)*[0-9]+).*/\1/p')" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            gitpod/vscode
          tags: |
            type=semver,pattern={{version}},value=v${{ env.VERSION }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          build-args: SERVER_VERSION=v${{ env.VERSION }}
          tags: ${{ steps.meta.outputs.tags }}
